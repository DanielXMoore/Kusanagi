# Test grammar with function application, arrays, and indentation

File
  Init Line* -> $2

Line
  Expression EOS -> $1

Indent
  ( "  " / "\t" )* ->
    if (global.verbose) {
      console.log("setting global indent", $1.length)
    }
    return global.currentIndent = $1.length

Id
  [a-z]+

Application
  Id "(" _* ")" ->
    return {type: "application", fn: $1, arguments: []}

  Id "(" _* Expression ")" ->
    return {
      type: "application",
      fn: $1,
      arguments: [$4],
    }

  Id "(" _* Expression _* ListPart* ")" ->
    return {
      type: "application",
      fn: $1,
      arguments: [$4, ...$6],
    }

  Id _+ Expression _* ListPart* ->
    return {
      type: "application",
      fn: $1,
      arguments: [$3, ...$5],
    }

  Id:id NestedExpressions:exps ->
    if(exps.length === 0) return id

    return {
      type: "application",
      fn: id,
      arguments: exps,
    }

  Id

Expression
  Application
  Bracket

Bracket
  "[" _* "]" ->
    return []
  "[" _* Expression _* "]" ->
    return [ $3 ]
  "[" _* Expression _* ListPart* "]" ->
    return [ $3 ].concat($5)
  "[" NestedExpressions:exps EOS? _* "]" -> exps

ListPart
  "," _* Expression:exp _* -> exp

Nested
  EOS? Indent:indent ->
    const prevIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, prevIndent)
    }
    if (indent !== prevIndent + 1) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }
    return indent

IndentedPart
  Nested Expression:exp -> exp

NestedExpressions
  PushIndent IndentedPart*:exps PopIndent -> exps

# Non-newline whitespace
_
  /[ \t]+/

# End of statemnt
EOS
  (_? EOL)+ _ EOF
  (_? EOL)+
  EOF

# End of line
EOL
  "\r\n"
  "\n"
  "\r"

# End of file
EOF
  !/[\s\S]/


# Indentation management

Init
  "" ->
    global.currentIndent = 0
    global.indentLevels = []
    global.verbose = false

PushIndent
  "" ->
    if (global.verbose) {
      console.log("pushing indent", global.currentIndent)
    }
    global.indentLevels.push(global.currentIndent)

PopIndent
  "" ->
    if (global.verbose) {
      console.log("popping indent")
    }
    global.indentLevels.pop()
