## Currently adapting from Grammar.txt

Prog
  Imports __ Declarations ->
    return {
      imports: $1,
      declarations: $3,
    }

Imports
  Imp ( ";" __ Imp )* ";"? ->
    return [$1].concat($2.map(([_1, _2, imp]) => imp))
  "" ->
    return []

Imp
  "import" __ PatNullary __ "="? __ Text __ -> [$7, $3]

Declarations
  Dec ( ";" Dec )*
  "" ->
    return []

Empty
  __
  ""

ObjSort
  "object"
  "actor"
  "module"

FuncSortOpt
  "shared" __ "query"?
  "query"
  Empty

SharedPatOpt
  # TODO: I don't understand PatPlain here
  "shared" __ "query"? __ PatPlain?
  "query" __ PatPlain?
  Empty

TypObj
  "{" __ TypField __ ( ";" __ TypField __ )* ";"? __ "}"
  "{" Empty "}"

TypVariant
  "{" "#" "}"
  "{" TypTag (";" TypTag )* "}"

TypNullary
  "(" TypItem ("," TypItem )* ")"
  "(" Empty ")"
  Id ("." Id)* TypArgs? ->
    console.log("TypNullary", $1)
  "[" "var"? Typ "]"
  TypObj
  TypVariant

TypUn
  TypNullary
  "?" TypUn

TypPre
  # TODO: async async isn't actually allowed, clean up this recursion
  "async" __ TypPre
  ObjSort __ TypObj
  TypUn

TypNobin
  TypPre
  FuncSortOpt __ ("<" __ ( TypBind ("," TypBind )* )? ">")? __ TypUn __ "->" TypNobin

Typ
  TypNobin __ TypRest*
  # NOTE: Eliminated left recursion

TypRest
  "and" __ Typ
  "or" __ Typ

TypItem
  Id ":" Typ
  Typ

TypArgs
  "<" ( Typ ("," Typ)* )? ">"

TypField
  "var"? Debug __ Id __ ":" __ Typ
  Id Typing TypNullary __ ":" __ Typ

Debug
  "" ->
    console.log("debug")

TypTag
  "#" Id (":" Typ)?

TypBind
  Id "<:" Typ
  Id

Bool
  "true"
  "false"

Ascii
  [\x00-\x7f]

AsciiNoNL
  [\x00-\x09\x0b-\x7f]

Utf8Cont
  [\x80-\xbf]

Utf8Enc
  [\xc2-\xdf] Utf8Cont
  [\xe0] [\xa0-\xbf] Utf8Cont
  [\xed] [\x80-\x9f] Utf8Cont
  [\xe1-\xec\xee-\xef] Utf8Cont Utf8Cont
  [\xf0] [\x90-\xbf] Utf8Cont Utf8Cont
  [\xf4] [\x80-\x8f] Utf8Cont Utf8Cont
  [\xf1-\xf3] Utf8Cont Utf8Cont Utf8Cont

Utf8
  Ascii
  Utf8Enc

Utf8NoNL
  AsciiNoNL
  Utf8Enc

Escape
  [nrt\\'"]

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#characters
Character
  [^"\\\x00-\x1f\x7f-\xff]
  Utf8Enc
  "\\" Escape
  "\\" HexDigit HexDigit
  "\\u{" HexNumber "}"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text
Text
  "\"" $(Character*) "\"" -> $2

Char
  "'" Character "'" -> $2

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#identifiers
Id
  /[a-zA-Z][a-zA-Z0-9_]*/ ->
    const id = $0
    if (["actor", "and", "assert", "await", "break", "case", "catch", "class", "continue", "debug", "debug_show", "do", "else", "flexible", "false", "for", "func", "if", "ignore", "in", "import", "not", "null", "object", "or", "label", "let", "loop", "private", "public", "query", "return", "shared", "stable", "system", "switch", "true", "try", "type", "var", "while"].includes(id)) {
      // console.log("skipping reserved word", id)
      return $skip
    }
    // console.log("Id", id)
    return id

Digit
  [0-9]

HexDigit
  [0-9a-fA-F]

Number
  Digit ( "_" Digit )*

HexNumber
  HexDigit ( "_" HexDigit )*

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#integers
Nat
  "0x" HexNumber
  Number

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#floats
Float
  Number "." Number?
  Number ( "." Number? )? [eE] [-+]? Number
  "0x" HexNumber "." HexNumber?
  "0x" HexNumber ( "." HexNumber? )? [pP] [-+]? Number

Lit
  "null"
  Bool
  Nat
  Float
  Char
  Text

Unop
  "+"
  "-"
  "^"

Binop
  "+"
  "-"
  "*"
  "/"
  "%"
  "**"
  "+%"
  "-%"
  "*%"
  "**%"
  "&"
  "|"
  "^"
  "<<"
  " >>"
  "<<>"
  "<>>"
  "#"

Relop
  "=="
  "!="
  " < "
  "<="
  " > "
  ">="

Unassign
  "+="
  "-="
  "^="

Binassign
  "+="
  "-="
  "*="
  "/="
  "%="
  "**-"
  "+%="
  "-%="
  "*%="
  "**%="
  "&="
  "|="
  "^="
  "<<="
  ">>="
  "<<>="
  "<>>="
  "@="

ExpObj
  "{" ExpField ( ";" ExpField )* "}"
  "{" Empty "}"

ExpPlain
  Lit
  "(" Exp ( "," Exp )* ")"
  "(" Empty ")"

ExpNullary
  ExpObj
  ExpPlain
  Id

ExpPost
  ExpNullary ExpPostRest*
  "[" "var"? ( ExpNonvar ( "," ExpNonvar )* )? "]"
  # NOTE: Eliminated left recursion

ExpPostRest
  "[" Exp "]"
  "." Nat
  "." Id
  # NOTE: This is the construct for function application
  TypArgs? ExpNullary
  "!"

ExpUn
  ExpPost
  "#" Id
  "#" Id ExpNullary
  "?" ExpUn
  Unop ExpUn
  Unassign ExpUn
  "actor" ExpPlain
  "not" ExpUn
  "debug_show" ExpUn
  "to_candid" "(" ( Exp ( "," Exp )* )? ")"
  "from_candid" ExpUn

ExpBin
  # NOTE: Eliminated left recursion
  ExpUn ExpBinRest*

ExpBinRest
  __ Binop __ ExpBin
  __ Relop __ ExpBin
  __ "and" __ ExpBin
  __ "or"  __ ExpBin
  __ ":"   __ TypNobin

ExpNondec
  "return" __ Exp?
  "async" __ ExpNest
  "await" __ ExpNest
  "assert" __ ExpNest
  "label" __ Id (":" __ Typ)? __ ExpNest
  "break" __ Id ExpNullary?
  "continue" __ Id
  "debug" __ ExpNest
  "if" __ ExpNullary __ ExpNest ( __ "else" __ ExpNest )?
  "try" __ ExpNest __ Catch
  "throw" __ ExpNest
  "switch" __ ExpNullary "{" ( Case (";" Case )* )? "}"
  "while" ExpNullary ExpNest
  "loop" __ ExpNest ( __ "while" __ ExpNest )?
  "for" __ "(" __ Pat __ "in" __ Exp __ ")" __ ExpNest
  "ignore" __ ExpNest
  "do" __ Block
  "do" __ "?" __ Block
  ExpBin __ ":=" __ Exp
  ExpBin __ Binassign __ Exp
  ExpBin

ExpNonvar
  ExpNondec
  DecNonvar

Exp
  ExpNonvar
  DecVar

ExpNest
  Block
  Exp

Block
  "{" __ ( Dec (";" __ Dec )* __ ";"? )? __ "}"

Case
  "case" PatNullary ExpNest

Catch
  "catch" PatNullary ExpNest

ExpField
  "var"? Id (":" Typ)?
  "var"? Id (":" Typ)? "=" Exp

DecField
  Vis __ Stab __ Dec

Vis
  "private"
  "public"
  "system"
  Empty

Stab
  "flexible"
  "stable"
  Empty

PatPlain
  "(" ( PatBin ("," PatBin )* )? ")" ->
    // console.log("PatPlain", $0)
    return $0
  "_"
  Lit
  Id

PatNullary
  PatPlain
  "{" ( PatField (";" PatField )* )? "}"

PatUn
  PatNullary
  "#" Id
  "#" Id PatNullary
  "?" PatUn
  Unop Lit

PatBin
  PatUn PatBinRest*
  # NOTE: Eliminated left recursion

PatBinRest
  "or" PatBin
  ":" Typ

Pat
  PatBin

PatField
  Id (":" Typ)?
  Id (":" Typ)? "=" Pat

DecVar
  "var" __ Id __ (":" Typ)? __ "=" __ Exp

DecNonvar
  "let" __ Pat __ "=" __ Exp
  "type" __ Id __ ("<" ( TypBind ( "," TypBind )* )? ">")? __ "=" __ Typ
  ObjSort __ Id? __ "="? __ ObjBody
  SharedPatOpt __ "func" __ Id? __ Typing? __ PatPlain __ (":" __ Typ)? __ FuncBody
  SharedPatOpt __ ObjSort? __ "class" __ Id? __ Typing? __ PatPlain __ (":" __ Typ)? __ ClassBody

Typing
  "<" ( TypBind ("," __ TypBind )* )? ">"

Dec
  DecVar
  DecNonvar
  ExpNondec

FuncBody
  "=" Exp
  Block

ObjBody
  "{" __ ( DecField __ (";" __ DecField __ )* ";"? __ )? __ "}" __

ClassBody
  "=" Id? ObjBody
  ObjBody

Comment
  # Multiline comment
  # TODO: handle nested comments
  "/*" $((!"*/" [^])*) "*/"

  # Single line comment
  /\/\/[^\r\n]*/

# Any or no whitespace including newlines and comments
__
  ([\s]+ / Comment)*
