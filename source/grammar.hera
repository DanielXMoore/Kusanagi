## Currently adapting from Grammar.txt

Prog
  Imports Declarations

Imports
  ( Imp ( ";" Imp )* ";"? )? __

Declarations
  ( Dec ( ";" Dec )* )?

Empty
  __
  ""

ObjSort
  "object"
  "actor"
  "module"

FuncSortOpt
  "shared" __ "query"?
  "query"
  Empty

SharedPatOpt
  "shared" __ "query"? __ PatPlain?
  "query" __ PatPlain?
  Empty

TypObj
  "{" TypField (";" TypField )* "}"
  "{" Empty "}"

TypVariant
  "{" "#" "}"
  "{" TypTag (";" TypTag )* "}"

TypNullary
  "(" TypItem ("," TypItem )* ")"
  "(" Empty ")"
  Id ("." Id)* TypArgs?
  "[" "var"? Typ "]"
  TypObj
  TypVariant

TypUn
  TypNullary
  "?" TypUn

TypPre
  TypUn
  "async" __ TypPre
  ObjSort __ TypObj

TypNobin
  TypPre
  FuncSortOpt __ ("<" __ ( TypBind ("," TypBind )* )? ">")? __ TypUn __ "->" TypNobin

Typ
  TypNobin
  Typ "and" Typ
  Typ "or" Typ

TypItem
  Id ":" Typ
  Typ

TypArgs
  "<" Typ ("," Typ)* ">"

TypField
  "var"? Id ":" Typ
  Id ("<" ( TypBind ("," TypBind )* )? ">")? TypNullary ":" Typ

TypTag
  "#" Id (":" Typ)?

TypBind
  Id "<:" Typ
  Id

Bool
  "true"
  "false"

Ascii
  [\x00-\x7f]

AsciiNoNL
  [\x00-\x09\x0b-\x7f]

Utf8Cont
  [\x80-\xbf]

Utf8Enc
  [\xc2-\xdf] Utf8Cont
  [\xe0] [\xa0-\xbf] Utf8Cont
  [\xed] [\x80-\x9f] Utf8Cont
  [\xe1-\xec\xee-\xef] Utf8Cont Utf8Cont
  [\xf0] [\x90-\xbf] Utf8Cont Utf8Cont
  [\xf4] [\x80-\x8f] Utf8Cont Utf8Cont
  [\xf1-\xf3] Utf8Cont Utf8Cont Utf8Cont

Utf8
  Ascii
  Utf8Enc

Utf8NoNL
  AsciiNoNL
  Utf8Enc

Escape
  [nrt\\'"]

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#characters
Character
  [^"\\\x00-\x1f\x7f-\xff]
  Utf8Enc
  "\\" Escape
  "\\" HexDigit HexDigit
  "\\u{" HexNumber "}"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text
Text
  "\"" Character* "\""

Char
  "'" Character "'"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#identifiers
Id
  [a-zA-Z][a-zA-Z0-9_]*

Digit
  [0-9]

HexDigit
  [0-9a-fA-F]

Number
  Digit ( "_" Digit )*

HexNumber
  HexDigit ( "_" HexDigit )*

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#integers
Nat
  Number
  "0x" HexNumber

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#floats
Float
  Number "." Number?
  Number ( "." Number? )? [eE] [-+]? Number
  "0x" HexNumber "." HexNumber?
  "0x" HexNumber ( "." HexNumber? )? [pP] [-+]? Number

Lit
  "null"
  Bool
  Nat
  Float
  Char
  Text

Unop
  "+"
  "-"
  "^"

Binop
  "+"
  "-"
  "*"
  "/"
  "%"
  "**"
  "+%"
  "-%"
  "*%"
  "**%"
  "&"
  "|"
  "^"
  "<<"
  " >>"
  "<<>"
  "<>>"
  "#"

Relop
  "=="
  "!="
  " < "
  "<="
  " > "
  ">="

Unassign
  "+="
  "-="
  "^="

Binassign
  "+="
  "-="
  "*="
  "/="
  "%="
  "**-"
  "+%="
  "-%="
  "*%="
  "**%="
  "&="
  "|="
  "^="
  "<<="
  ">>="
  "<<>="
  "<>>="
  "@="

ExpObj
  "{" ExpField ( ";" ExpField )* "}"
  "{" Empty "}"

ExpPlain
  Lit
  "(" Exp ( "," Exp )* ")"
  "(" Empty ")"

ExpNullary
  ExpObj
  ExpPlain
  Id

# TODO: Eliminate left recursion
ExpPost
  ExpNullary
  "[" "var"? ( ExpNonvar ( "," ExpNonvar )* )? "]"
  ExpPost "[" Exp "]"
  ExpPost "." Nat
  ExpPost "." Id
  ExpPost ("<" ( Typ ("," Typ)* )? ">")? ExpNullary
  ExpPost "!"

ExpUn
  ExpPost
  "#" Id
  "#" Id ExpNullary
  "?" ExpUn
  Unop ExpUn
  Unassign ExpUn
  "actor" ExpPlain
  "not" ExpUn
  "debug_show" ExpUn
  "to_candid" "(" ( Exp ( "," Exp )* )? ")"
  "from_candid" ExpUn

# TODO: Eliminate left recursion
ExpBin
  ExpUn
  ExpBin Binop ExpBin
  ExpBin Relop ExpBin
  ExpBin "and" ExpBin
  ExpBin "or" ExpBin
  ExpBin ":" TypNobin

ExpNondec
  ExpBin
  ExpBin ":=" Exp
  ExpBin Binassign Exp
  "return" Exp?
  "async" ExpNest
  "await" ExpNest
  "assert" ExpNest
  "label" Id (":" Typ)? ExpNest
  "break" Id ExpNullary?
  "continue" Id
  "debug" ExpNest
  "if" ExpNullary ExpNest
  "if" ExpNullary ExpNest "else" ExpNest
  "try" ExpNest Catch
  "throw" ExpNest
  "switch" ExpNullary "{" ( Case (";" Case )* )? "}"
  "while" ExpNullary ExpNest
  "loop" ExpNest
  "loop" ExpNest "while" ExpNest
  "for" "(" Pat "in" Exp ")" ExpNest
  "ignore" ExpNest
  "do" Block
  "do" "?" Block

ExpNonvar
  ExpNondec
  DecNonvar

Exp
  ExpNonvar
  DecVar

ExpNest
  Block
  Exp

Block
  "{" ( Dec (";" Dec )* )? "}"

Case
  "case" PatNullary ExpNest

Catch
  "catch" PatNullary ExpNest

ExpField
  "var"? Id (":" Typ)?
  "var"? Id (":" Typ)? "=" Exp

DecField
  Vis __ Stab __ Dec

Vis
  "private"
  "public"
  "system"
  Empty

Stab
  "flexible"
  "stable"
  Empty

PatPlain
  "_"
  Id
  Lit
  "(" ( PatBin ("," PatBin )* )? ")"

PatNullary
  PatPlain
  "{" ( PatField (";" PatField )* )? "}"

PatUn
  PatNullary
  "#" Id
  "#" Id PatNullary
  "?" PatUn
  Unop Lit

# TODO: Eliminate left recursion
PatBin
  PatUn
  PatBin "or" PatBin
  PatBin ":" Typ

Pat
  PatBin

PatField
  Id (":" Typ)?
  Id (":" Typ)? "=" Pat

DecVar
  "var" __ Id __ (":" Typ)? __ "=" __ Exp

DecNonvar
  "let" __ Pat __ "=" __ Exp
  "type" __ Id __ ("<" ( TypBind ( "," TypBind )* )? ">")? "=" Typ
  ObjSort __ Id? __ "="? __ ObjBody
  SharedPatOpt __ "func" __ Id? __ ("<" ( TypBind ("," TypBind )* )? ">")? __ PatPlain __ (":" Typ)? __ FuncBody
  SharedPatOpt __ ObjSort? __ "class" __ Id? __ ("<" ( TypBind ("," TypBind )* )? ">")? __ PatPlain __ (":" Typ)? __ ClassBody

Dec
  DecVar
  DecNonvar
  ExpNondec

FuncBody
  "=" Exp
  Block

ObjBody
  "{" __ ( DecField __ (";" __ DecField __ )* ";"? __ )? __ "}" __

ClassBody
  "=" Id? ObjBody
  ObjBody

Imp
  "import" __ PatNullary __ "="? __ Text __

# Any whitespace including newlines
__
  [\s]*
