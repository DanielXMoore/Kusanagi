File
  Line* ->
    const lines = $1

    function indented(indent, text) {
      return "".padStart(2 * indent, " ") + text
    }

    function nextIndent(index) {
      do {
        index++
        const next = lines[index]
        if (!next || next === "\n") continue

        return next[0]
      } while (lines[index])

      return 0
    }

    return lines.map((line, i) => {
      // newlines
      if (typeof line === "string") {
        return ""
      }

      const n = nextIndent(i)
      let indent = line[0]
      let text = indented(indent, line[1])

      if (indent < n) {
        text += " {"
      } else if (indent > n) {
        text += ";"
        // close all open indents
        while (indent > n) {
          indent--
          text += "\n" + indented(indent, "}")
        }
      } else {
        text += ";"
      }

      return text
    }).join("\n")

Line
  EOS ->
    return "\n"

  Indent LineBody EOS -> [$1, $2]

LineBody
  RestOfLine

RestOfLine
  /[^\n\r]*/

Identifier
  /[a-zA-Z][a-zA-Z0-9-]*/

Indent
  ( "  " / "\t" )* ->
    return $1.length

_
  /[ \t]+/

__
  (/[ \t]/ / EOL)+

Value
  "\"" DoubleStringCharacter* "\"" ->
    return $2.join("")
  "'" SingleStringCharacter* "'" ->
    return $2.join("")
  Number

DoubleStringCharacter
  !("\"" / "\\") /./ -> $2
  "\\" EscapeSequence -> $2

SingleStringCharacter
  !("'" / "\\") /./ -> $2
  "\\" EscapeSequence -> $2

EscapeSequence
  "'"
  "\""
  "\\"
  /./  ->
    return "\\" + $0

Number
  /-?[0-9]+\.[0-9]+/
  /-?[0-9]+/

EOS
  (_? EOL)
  EOF

EOL
  "\r\n"
  "\n"
  "\r"

EOF
  !/[\s\S]/

