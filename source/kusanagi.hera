###
# Kusanagi to Motoko Transpiler
# Kusanagi is a CoffeeScript inspired indentation based syntax for Motoko.
# This transpiler works by inserting implied braces and parentheses for indentation based nested objects.
# Tries to be as congruent with the Motoko language as possible.
###

Prog
  Init Imp* Declaration* __

Imp
  __ "import" PatNullary __ "="? __ Text StatementDelimiter

Declaration
  __ Dec StatementDelimiter

ObjSort
  "object"
  "actor"
  "module"

SharedPatOpt
  ("shared" ("(" Id ")")? _)? ("query" ("(" Id ")")? _)? (PatPlain _)?

TypObj
  __ "{" DelimitedTypField* __ "}"
  InsertOpenBrace EOS NestedTypFields InsertNewline InsertIndent InsertCloseBrace

DelimitedTypField
  __ TypField BlockFieldDelimiter

TypField
  "var"? ( __ Id )     TypeSuffix
  Id Typing TypNullary TypeSuffix

BlockFieldDelimiter
  # TypFields end with a semi-colon or an optional final semi-colon then the closing brace
  StatementDelimiter
  &( __ "}" )

NestedTypFields
  PushIndent NestedTypField*:fields PopIndent ->
    if (!fields.length) return $skip
    return fields

NestedTypField
  Nested TypField StatementDelimiter

TypVariant
  __ "{" __ "#" __ "}"
  __ "{" TypVariantField* __ "}"
  InsertOpenBrace EOS NestedTypTags InsertNewline InsertIndent InsertCloseBrace

TypVariantField
  __ TypTag BlockFieldDelimiter

NestedTypTags
  PushIndent NestedTypTag*:tags PopIndent ->
    if (!tags.length) return $skip
    return tags

NestedTypTag
  Nested TypTag StatementDelimiter

TypTag
  "#" __ Id TypeSuffix?

TypNullary
  __ "(" TypItemField* __ ")"
  __ "[" __ "var"? __ Typ __ "]"
  TypVariant
  TypObj
  __ Id ("." Id)* TypArgs?

TypItemField
  __ TypItem __ TypItemDelimiter

TypItemDelimiter
  ","
  ","? __ &")"

TypUn
  TypNullary
  __ "?" TypUn

TypPre
  # NOTE: converted recursive "async" to optional
  "async"? __ ObjSort __ TypObj
  ("async" __)? TypUn

FuncSortOpt
  "shared" __ "query"?
  "query"
  __

TypNobin
  __ FuncSortOpt (__ Typing)? __ TypUn __ "->" __ TypNobin
  TypPre

Typ
  TypNobin TypRest*
  # NOTE: Eliminated left recursion

TypRest
  __ "and" __ Typ
  __ "or"  __ Typ

TypItem
  Id TypeSuffix
  Typ

TypArgs
  "<" TypArgField* ">"

TypArgField
  __ Typ ( ("," __) / (","? __ &">") )

TypBind
  Id __ "<:" __ Typ
  Id

Bool
  "true"
  "false"

Ascii
  [\x00-\x7f]

AsciiNoNL
  [\x00-\x09\x0b-\x7f]

Utf8Cont
  [\x80-\xbf]

Utf8Enc
  [\xc2-\xdf] Utf8Cont
  [\xe0] [\xa0-\xbf] Utf8Cont
  [\xed] [\x80-\x9f] Utf8Cont
  [\xe1-\xec\xee-\xef] Utf8Cont Utf8Cont
  [\xf0] [\x90-\xbf] Utf8Cont Utf8Cont
  [\xf4] [\x80-\x8f] Utf8Cont Utf8Cont
  [\xf1-\xf3] Utf8Cont Utf8Cont Utf8Cont

Utf8
  Ascii
  Utf8Enc

Utf8NoNL
  AsciiNoNL
  Utf8Enc

Escape
  [nrt\\'"]

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#characters
Character
  [^"\\\x00-\x1f\x7f-\xff]
  Utf8Enc
  "\\" Escape
  "\\" HexDigit HexDigit
  "\\u{" HexNumber "}"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text
Text
  $("\"" Character* "\"")

Char
  $("'" Character "'")

ReservedWord
  /(actor|and|assert|await|break|case|catch|class|continue|debug|debug_show|do|else|flexible|false|for|func|if|ignore|in|import|not|null|object|or|label|let|loop|match|private|public|query|return|shared|stable|system|switch|take|true|try|type|var|while)(?=[^a-zA-Z0-9_])/

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#identifiers
Id
  !ReservedWord /[a-zA-Z_][a-zA-Z0-9_]*/:id -> id

Digit
  [0-9]

HexDigit
  [0-9a-fA-F]

Number
  # NOTE: Keeping numbers as a text string exactly as written
  $(Digit ( "_"? Digit )*)

HexNumber
  # NOTE: Keeping numbers as a text string exactly as written
  $(HexDigit ( "_"? HexDigit )*)

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#integers
Nat
  "0x" HexNumber
  Number

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#floats
Float
  "0x" HexNumber "." HexNumber?
  "0x" HexNumber ( "." HexNumber? )? [pP] [-+]? Number
  Number "." Number?
  Number ( "." Number? )? [eE] [-+]? Number

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#literals
Lit
  "null"
  Bool
  $(Nat)
  $(Float)
  Char
  Text

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#unary-operators
Unop
  "+"
  "-"
  "^"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#numeric-binary-operators
# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#bitwise-and-wrapping-binary-operators
Binop
  "**"
  "+%"
  "-%"
  "*%"
  "**%"
  "<<>"
  "<>>"
  "<<"
  ">>" # NOTE: removed leading whitespace
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text-operators
  "#"
  "+"
  "-"
  "*"
  "/"
  "%"
  "&"
  "|"
  "^"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#relational-operators
# NOTE: removed surrounding whitespace from angle brackets since PEG doesn't have a separate tokenization phase and has more
# context for the operator. May need to add it back later to be strictly match the spec. Can likely use a RegExp lookahead
# assertion for the whitespace matching in ExpBinRest if necessary.
Relop
  "=="
  "!="
  "<="
  ">="
  "<" # NOTE: removed surrounding whitespace
  ">" # NOTE: removed surrounding whitespace

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#assignment-operators
Unassign
  "+="
  "-="
  "^="

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#assignment-operators
Binassign
  "+="
  "-="
  "*="
  "/="
  "%="
  "**-"
  "+%="
  "-%="
  "*%="
  "**%="
  "&="
  "|="
  "^="
  "<<="
  ">>="
  "<<>="
  "<>>="
  "@="
  "#=" # NOTE: Added
  ":=" # NOTE: Moved here from ExpNondec

ExpObj
  # NOTE: Added brace-less indentation based syntax
  InsertOpenBrace EOS NestedObjectFields InsertNewline InsertIndent InsertCloseBrace
  # NOTE: Added indentation based object syntax
  __ "{" NestedObjectFields __ "}"
  # Object Pattern https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#object-pattern
  # This different from PatNullary because exp fields can optionally start with "var"
  __ "{" __ ExpObjField* "}"

ExpObjField
  # NOTE: Extracted field rule for easier iteration
  ExpField BlockFieldDelimiter __

NestedObjectFields
  PushIndent NestedObjectField*:fields PopIndent ->
    if (!fields.length) return $skip
    return fields

NestedObjectField
  Nested ExpField BlockFieldDelimiter

ExpPlain
  TrailingComment* Lit
  # NOTE: Extracted expression part for easier iteration
  TrailingComment* "(" __ ExpPlainPart* ")"
  # NOTE: Added Parentheses-less tuple
  # This is used in if/switch/while conditions and function application
  TrailingComment+:spacing !EOL Exp:exp CommaExp*:rest ->
    spacing = replaceStr(spacing, /^ /, "")

    return ["(", spacing, exp, ...rest, ")"]

ExpPlainPart
  Exp __ ( "," / (__ &")") ) __

CommaExp
  "," __ Exp

ExpNullary
  ExpObj
  ExpPlain
  Id

ExpPost
  ExpNullary:exp ExpPostRest*:rest ->
    // Convert null soaks to do block
    if (rest.some((v) => v === "?")) {
      return ["do?{", exp, rest.map((v) => v === "?" ? "!" : v), "}"]
    }
    return [exp, rest]
  # Array
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#arrays
  # NOTE: Added indentation based array syntax
  "[" (__ "var")? EOS NestedArrayParts __ "]"
  "[" __ ( "var" __ )? ArrayPart* __ "]"
  # NOTE: Eliminated left recursion

ArrayPart
  __ ExpNonvar ArrayItemDelimiter

ArrayItemDelimiter
  TrailingComment* ","
  ImpliedComma
  &( __ "]" )

ImpliedComma
  TrailingComment* &EOS -> [",", $1]

NestedArrayParts
  PushIndent NestedArrayPart*:exps PopIndent ->
    if (!exps.length) return $skip
    return exps

NestedArrayPart
  Nested ExpNonvar ArrayItemDelimiter

ExpPostRest
  # Array Indexing
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#array-indexing
  "[" __ Exp __ "]"
  # Tuple Projection, Object Projection
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#tuples
  (__ "." __ ( Nat / Id ))
  # Function application
  TypArgs? !EOS ExpNullary
  "!" # Null break
  "?" # Null soak

ExpUn
  ExpPost
  # Variant Pattern
  # NOTE: Combined and added `?` to prevent shadowing
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#variant-pattern
  __ "#" Id ExpNullary?
  __ "?" ExpUn
  Unop ![\s] ExpUn
  Unassign ![\s] ExpUn
  "actor" ExpPlain
  "not" ExpUn
  "debug_show" ExpUn
  "to_candid" "(" ( Exp ( "," Exp )* )? ")"
  "from_candid" ExpUn

ExpBin
  # NOTE: Eliminated left recursion
  ExpUn ExpBinRest*

ExpBinRest
  __ Binop __ ExpBin
  __ Relop __ ExpBin
  __ "and" __ ExpBin
  __ "or"  __ ExpBin
  __ ":"   __ TypNobin

ExpNondec
  "return"   ( __ Exp )?
  # TODO: A little hacky and brittle, here is where keeping the AST nodes for array args would really help out
  "take" ExpNullary:exps ->
    var exp, def;
    if (Array.isArray(exps)) {
      if (exps[0] === "(") {
        exp = exps[2][0];
        def = exps[3][2];
      } else if (exps[1] === "(") {
        exp = exps[3][0][0];
        def = exps[3][1][0];
      }

      if (exp != undefined && def != undefined) {
        return ["switch(", exp, "){case(null){", def, "};case(?val){val}}"]
      }
    }
    return $skip

  # TODO: A little hacky and brittle, here is where keeping the AST nodes for array args would really help out
  "match" ExpNullary:exps ->
    var exp, pred, def;
    if (Array.isArray(exps)) {
      if (exps[0] === "(") {
        exp  = exps[2][0];
        pred = exps[3][2];
        def  = exps[4][2];
      } else if (exps[1] === "(") {
        exp  = exps[3][0][0];
        pred = exps[3][1][0];
        def  = exps[3][2][0];
      }

      if (exp != undefined && def != undefined) {
        return ["switch(", exp, "){case(", pred, "){", exp, "};case(_){", def, "}}"]
      }
    }
    return $skip

  "async"    ExpNest
  "await"    ExpNest
  "assert"   ExpNest
  "label"    (__ Id) TypeSuffix? ExpNest
  "break"    (__ Id) ExpNullary?
  "continue" (__ Id)
  "debug"    ExpNest
  "if"       ExpNullary ExpNest ElseBlock?
  "try"      ExpNest __ Catch
  "throw"    ExpNest
  "switch"   ExpNullary __ "{" __ Case* __ "}"
  # NOTE: Added brace-less switch
  "switch"   ExpNullary InsertOpenBrace EOS NestedCases InsertNewline InsertIndent InsertCloseBrace
  "while"    ExpNullary ExpNest
  "loop"     ExpNest WhileBlock?
  "for"      __ "(" __ Pat __ "in" __ Exp __ ")" ExpNest
  # NOTE: Added paren-less `for`
  "for"      TrailingComment+ InsertOpenParen Pat __ "in" __ Exp InsertCloseParen ExpNest
  "ignore"   ExpNest
  "do" (__ "?")? Block

  # NOTE: Added arrow func expression shorthand
  (__ Typing)?:typing (__ PatPlain):pat TypeSuffix?:suffix __:spacing "=>" FuncBody:body ->
    return ["func ", typing, pat, suffix, replaceStr(spacing, /^ /, ""), body]

  # NOTE: Moved ":=" into Binassign
  ExpBin __ Binassign __ Exp
  ExpBin

ElseBlock
  __ "else" ExpNest

WhileBlock
  __ "while" ExpNest

ExpNonvar
  ExpNondec
  DecNonvar

Exp
  ExpNonvar
  DecVar

ExpNest
  Block
  __ Exp

Block
  __ "{" __ BlockDeclaration* "}"
  InsertOpenBrace EOS NestedBlockDeclarations InsertNewline InsertIndent InsertCloseBrace

NestedBlockDeclarations
  PushIndent NestedBlockDeclaration*:decs PopIndent ->
    if (!decs.length) return $skip
    return decs

NestedBlockDeclaration
  Nested Dec StatementDelimiter

# NOTE: Extracted block declaration with optional trailing semi-colon when object closes to make field iteration easier in Block
BlockDeclaration
  Dec BlockFieldDelimiter __

Case
  __ "case" PatNullary ExpNest BlockFieldDelimiter

NestedCases
  PushIndent NestedCase*:cases PopIndent ->
    if (!cases.length) return $skip
    return cases

NestedCase
  Nested "case" PatNullary ExpNest ImpliedSemicolon

Catch
  "catch" PatNullary ExpNest

ExpField
  "var"? __ Id TypeSuffix? (__ "=" __ Exp)?

DecField
  ( Vis __ )? ( Stab __ )? Dec

Vis
  "private"
  "public"
  "system"

Stab
  "flexible"
  "stable"

PatPlain
  __ "(" __ PatPlainPart* ")"
  # NOTE: Added Parentheses-less PatPlain
  TrailingComment+:spacing !EOL PatBin:pat CommaPat*:rest ->
    if (!rest.length) return [spacing, pat]

    spacing = replaceStr(spacing, /^ /, "")

    return ["(", spacing, pat, ...rest, ")"]

  # NOTE: This requires matching at least some whitespace to prevent infinite recursion
  # there may be a way to improve this with assertions or refactoring some rules
  TrailingComment+ PatBin
  __ Id
  __ Lit

# NOTE: Extracted PatPlainPart with optional trailing comma before close parenthesis
PatPlainPart
  PatBin PatPlainDelimiter __

PatPlainDelimiter
  __ "," &( __ ")" )?
  &( __ ")" )

CommaPat
  __ "," PatBin

PatNullary
  PatPlain
  # Object Pattern https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#object-pattern
  __ "{" PatObjectField* __ "}"

PatObjectField
  __ PatField BlockFieldDelimiter

PatUn
  PatNullary
  __ "#" Id PatNullary? # NOTE: Merged in "#" Id with optional nullary to prevent shadowing
  __ "?" __ PatUn
  Unop Lit

PatBin
  PatUn PatBinRest*
  # NOTE: Eliminated left recursion

PatBinRest
  __ "or" __ PatBin
  __ ":"  __ Typ

Pat
  PatBin

PatField
  Id TypeSuffix? __ "=" __  Pat
  Id TypeSuffix?

DecVar
  "var" __ Id (__ TypeSuffix)? __ "=" __ Exp

DecNonvar
  "let" Pat __ "=" TrailingComment* Exp
  "type" __ Id  (__ Typing)? __ "=" Typ

  ObjSort (__ Id)? (__ "=")? ObjBody

  SharedPatOpt               "func"  (__ Typing)? (__ PatPlain) TypeSuffix? FuncBody
  SharedPatOpt               "func"  (__ Id)? (__ Typing)? (__ PatPlain) TypeSuffix? FuncBody
  SharedPatOpt (ObjSort __)? "class" (__ Id)? (__ Typing)? (__ PatPlain) TypeSuffix? ClassBody

TypeSuffix
  __ ":" __ Typ

Typing
  "<" TypingField* ">"

TypingField
  TypBind __ ( ("," __) / &">" )

Dec
  DecVar
  DecNonvar
  ExpNondec

FuncBody
  Block
  __ "=" __ Exp

ObjBody
  __ "{" ObjBodyField* __ "}" __
  # NOTE: Added indented object body
  InsertOpenBrace EOS NestedObjBodyFields InsertNewline InsertIndent InsertCloseBrace

# NOTE: Extracted dec-field with optional trailing semi-colon when object closes to make field iteration easier in ObjBody
ObjBodyField
  __ DecField BlockFieldDelimiter

NestedObjBodyFields
  PushIndent NestedObjBodyField*:fields PopIndent ->
    if (!fields.length) return $skip
    return fields

NestedObjBodyField
  Nested DecField BlockFieldDelimiter

ClassBody
  __ "=" __ Id? __ ObjBody
  ObjBody

MotokoLiteral
  /`((?:[^`\\]|\\.)*)`/ -> $1

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#comments
Comment
  $MultilineComment
  $SingleLineComment
  MotokoLiteral

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#comments
MultilineComment
  # Note: Allows for nested Comments
  "/*" ( (!("/*" / "*/") . ) / MultilineComment )* "*/"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#comments
SingleLineComment
  /\/\/[^\r\n]*/

# Any or no whitespace including newlines and comments
__
  ([\s]+ / Comment)* ->
    return $0.join('')

# Non-newline whitespace
_
  /[ \t]+/

# End of statement
EOS
  RestOfLine+

RestOfLine
  TrailingComment* EOL

# Trailing comments within a single logical line (newlines within a multi-line comment don't count)
TrailingComment
  (_ / Comment)

# End of line
EOL
  /\r\n|\n|\r|$/

# End of file
EOF
  /$/

# Inserting implied symbols for transpilation

StatementDelimiter
  TrailingComment* ";"
  ImpliedSemicolon

ImpliedSemicolon
  TrailingComment* &EOS -> [";", $1]

InsertOpenParen
  "" -> "("

InsertCloseParen
  "" -> ")"

InsertOpenBrace
  # NOTE: Open braces has a space before it
  "" -> " {"

InsertCloseBrace
  "" -> "}"

InsertIndent
  "" ->
    return "".padStart(global.currentIndent * 2)

InsertNewline
  "" ->
    return "\n"

# Indentation management

Indent
  ( "  " / "\t" )* ->
    return $1.length

Nested
  EOS?:eos Indent:indent ->
    const currentIndent = global.indentLevels[global.indentLevels.length-1]
    if (global.verbose) {
      console.log("global indent", global.currentIndent)
      console.log("Indented", indent, currentIndent)
    }
    if (indent !== currentIndent) {
      if (global.verbose) {
        console.log("skipped nested")
      }
      return $skip
    }

    return [eos, "".padStart(indent * 2)]

Init
  "" ->
    global.currentIndent = 0
    global.indentLevels = [0]
    global.verbose = false

    global.replaceStr = function (str, pat, v) {
      if(typeof str === "string") {
        return str.replace(pat, v)
      } else if(Array.isArray(str)) {
        return [replaceStr(str[0], pat, v), ...str.slice(1)]
      } else {
        return str
      }
    }

PushIndent
  "" ->
    global.currentIndent++
    if (global.verbose) {
      console.log("pushing indent", global.currentIndent)
    }
    global.indentLevels.push(global.currentIndent)

    return global.currentIndent

PopIndent
  "" ->
    if (global.verbose) {
      console.log("popping indent", global.indentLevels[global.indentLevels.length-1], "->", global.indentLevels[global.indentLevels.length-2])
    }
    global.indentLevels.pop()
    global.currentIndent = global.indentLevels[global.indentLevels.length-1]

    return global.currentIndent
