## Currently adapting from Grammar.txt

Prog
  __ Imports:imps __ Declarations:decs ->
    return {
      imports: imps,
      declarations: decs,
    }

Imports
  Imp ( ";" __ Imp )* __ ";"? ->
    return [$1].concat($2.map(([_1, _2, imp]) => imp))
  "" ->
    return []

Imp
  "import" __ PatNullary:pat __ "="? __ Text:source __ -> [source, pat]

Declarations
  Dec ( ";" Dec )* __ ";"? __ ->
    return [$1].concat($2.map(([_1, _2, dec]) => dec))
  "" ->
    return []

Empty
  __ ->
    return ""

ObjSort
  "object"
  "actor"
  "module"

FuncSortOpt
  "shared" __ "query"?
  "query"
  Empty

SharedPatOpt
  "shared" __ "query"? __ PatPlain?
  "query" __ PatPlain?
  Empty

TypObj
  "{" __ TypField __ ( ";" __ TypField __ )* ";"? __ "}"
  "{" Empty "}"

TypVariant
  "{" __ "#" __ "}"
  "{" __ TypTag ( __ ";" __ TypTag )* __ ";"? __ "}"

TypNullary
  "(" __ TypItem ( __ "," __ TypItem )* __ ")"
  "(" Empty ")"
  Id ("." Id)* TypArgs?
  "[" __ "var"? __ Typ __ "]"
  TypObj
  TypVariant

TypUn
  TypNullary
  "?" TypUn

TypPre
  # NOTE: converted recursive "async" to optional
  "async"? __ ObjSort:type __ TypObj:body ->
    return {
      async: !!$1,
      type,
      body,
    }
  "async"? __ TypUn

TypNobin
  FuncSortOpt __ ("<" __ ( TypBind ("," TypBind )* )? ">")? __ TypUn __ "->" __ TypNobin
  TypPre

Typ
  TypNobin __ TypRest*
  # NOTE: Eliminated left recursion

TypRest
  "and" __ Typ
  "or" __ Typ

TypItem
  Id __ ":" __ Typ
  Typ

TypArgs
  "<" ( Typ ("," __ Typ)* )? ">"

TypField
  "var"? __ Id __ ":" __ Typ
  Id Typing TypNullary __ ":" __ Typ

TypTag
  "#" Id __ (":" __ Typ)?

TypBind
  Id __ "<:" __ Typ
  Id

Bool
  "true"
  "false"

Ascii
  [\x00-\x7f]

AsciiNoNL
  [\x00-\x09\x0b-\x7f]

Utf8Cont
  [\x80-\xbf]

Utf8Enc
  [\xc2-\xdf] Utf8Cont
  [\xe0] [\xa0-\xbf] Utf8Cont
  [\xed] [\x80-\x9f] Utf8Cont
  [\xe1-\xec\xee-\xef] Utf8Cont Utf8Cont
  [\xf0] [\x90-\xbf] Utf8Cont Utf8Cont
  [\xf4] [\x80-\x8f] Utf8Cont Utf8Cont
  [\xf1-\xf3] Utf8Cont Utf8Cont Utf8Cont

Utf8
  Ascii
  Utf8Enc

Utf8NoNL
  AsciiNoNL
  Utf8Enc

Escape
  [nrt\\'"]

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#characters
Character
  [^"\\\x00-\x1f\x7f-\xff]
  Utf8Enc
  "\\" Escape
  "\\" HexDigit HexDigit
  "\\u{" HexNumber "}"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text
Text
  "\"" $(Character*) "\"" -> $2

Char
  "'" Character "'" -> $2

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#identifiers
Id
  /[a-zA-Z][a-zA-Z0-9_]*/ ->
    const id = $0
    if (["actor", "and", "assert", "await", "break", "case", "catch", "class", "continue", "debug", "debug_show", "do", "else", "flexible", "false", "for", "func", "if", "ignore", "in", "import", "not", "null", "object", "or", "label", "let", "loop", "private", "public", "query", "return", "shared", "stable", "system", "switch", "true", "try", "type", "var", "while"].includes(id)) {
      // console.log("skipping reserved word", id)
      return $skip
    }
    // console.log("Id", id)
    return id

Digit
  [0-9]

HexDigit
  [0-9a-fA-F]

Number
  Digit ( "_" Digit )*

HexNumber
  HexDigit ( "_" HexDigit )*

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#integers
Nat
  "0x" HexNumber
  Number

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#floats
Float
  Number "." Number?
  Number ( "." Number? )? [eE] [-+]? Number
  "0x" HexNumber "." HexNumber?
  "0x" HexNumber ( "." HexNumber? )? [pP] [-+]? Number

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#literals
Lit
  "null"
  Bool
  Nat
  Float
  Char
  Text

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#unary-operators
Unop
  "+"
  "-"
  "^"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#numeric-binary-operators
# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#bitwise-and-wrapping-binary-operators
Binop
  "+"
  "-"
  "*"
  "/"
  "%"
  "**"
  "+%"
  "-%"
  "*%"
  "**%"
  "&"
  "|"
  "^"
  "<<"
  ">>" # NOTE: removed leading whitespace
  "<<>"
  "<>>"
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#text-operators
  "#"

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#relational-operators
# NOTE: removed surrounding whitespace from angle brackets since PEG doesn't have a separate tokenization phase and has more
# context for the operator. May need to add it back later to be strictly match the spec. Can likely use a RegExp lookahead
# assertion for the whitespace matching in ExpBinRest if necessary.
Relop
  "=="
  "!="
  "<" # NOTE: removed surrounding whitespace
  "<="
  ">" # NOTE: removed surrounding whitespace
  ">="

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#assignment-operators
Unassign
  "+="
  "-="
  "^="

# https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#assignment-operators
Binassign
  "+="
  "-="
  "*="
  "/="
  "%="
  "**-"
  "+%="
  "-%="
  "*%="
  "**%="
  "&="
  "|="
  "^="
  "<<="
  ">>="
  "<<>="
  "<>>="
  "@="
  "#=" # NOTE: Added

ExpObj
  "{" __ ExpField ( __ ";" __ ExpField )* __ ";"? __ "}"
  "{" Empty "}"

ExpPlain
  Lit
  "(" __ Exp ( __ "," __ Exp )* __ ","? __ ")"
  "(" Empty ")"

ExpNullary
  ExpObj
  ExpPlain
  Id

ExpPost
  ExpNullary ExpPostRest*
  "[" "var"? ( ExpNonvar ( "," ExpNonvar )* )? "]"
  # NOTE: Eliminated left recursion

ExpPostRest
  # Array Indexing
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#array-indexing
  "[" Exp "]"
  # Tuple Projection
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#tuples
  "." Nat
  # Object Projection (member access)
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#object-projection-member-access
  "." Id
  # Function application
  TypArgs? __ ExpNullary
  "!"

ExpUn
  ExpPost
  # Variant Pattern
  # NOTE: Combined and added `?` to prevent shadowing
  # https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/language-manual.adoc#variant-pattern
  "#" Id __ ExpNullary?
  "?" ExpUn
  Unop ExpUn
  Unassign ExpUn
  "actor" ExpPlain
  "not" ExpUn
  "debug_show" ExpUn
  "to_candid" "(" ( Exp ( "," Exp )* )? ")"
  "from_candid" ExpUn

ExpBin
  # NOTE: Eliminated left recursion
  ExpUn ExpBinRest*

ExpBinRest
  __ Binop __ ExpBin
  __ Relop __ ExpBin
  __ "and" __ ExpBin
  __ "or"  __ ExpBin
  __ ":"   __ TypNobin

ExpNondec
  "return" __ Exp?:exp ->
    return {type: "return", exp}
  "async" __ ExpNest
  "await" __ ExpNest
  "assert" __ ExpNest
  "label" __ Id (":" __ Typ)? __ ExpNest
  "break" __ Id ExpNullary?
  "continue" __ Id
  "debug" __ ExpNest
  "if" __ ExpNullary __ ExpNest ( __ "else" __ ExpNest )?
  "try" __ ExpNest __ Catch
  "throw" __ ExpNest
  "switch" __ ExpNullary "{" ( Case (";" Case )* )? "}"
  "while" ExpNullary ExpNest
  "loop" __ ExpNest ( __ "while" __ ExpNest )?
  "for" __ "(" __ Pat __ "in" __ Exp __ ")" __ ExpNest
  "ignore" __ ExpNest
  "do" __ Block
  "do" __ "?" __ Block
  ExpBin __ ":=" __ Exp # ?: This is separated from Binassign, should it be?
  ExpBin __ Binassign __ Exp
  ExpBin

ExpNonvar
  ExpNondec
  DecNonvar

Exp
  # TODO: Just returning strings of the expressions for now
  $(ExpNonvar)
  $(DecVar)

ExpNest
  Block
  Exp

Block
  "{" __ BlockDeclaration*:decs "}" -> decs

# NOTE: Extracted block declaration with optional trailing semi-colon when object closes to make field iteration easier in Block
BlockDeclaration
  Dec:dec __ ( ";" / (__ &"}") ) __ -> dec

Case
  "case" PatNullary ExpNest

Catch
  "catch" PatNullary ExpNest

ExpField
  "var"? __ Id (__ ":" __ Typ)? (__ "=" __ Exp)?

DecField
  Vis:vis __ Stab:stab __ Dec:dec ->
    return { vis, stab, dec }

Vis
  "private"
  "public"
  "system"
  Empty

Stab
  "flexible"
  "stable"
  Empty

PatPlain
  "(" __ PatPlainPart*:parts ")" -> parts
  "_"
  Lit
  Id

# NOTE: Extracted PatPlainPart with optional trailing comma before close parenthesis
PatPlainPart
  PatBin:pat __ ( "," / (__ &")") ) __ -> pat

PatNullary
  # TODO: String value of parsed pattern for now
  $(PatPlain)
  "{" ( PatField (";" PatField )* )? "}"

PatUn
  PatNullary
  "#" Id
  "#" Id PatNullary
  "?" PatUn
  Unop Lit

PatBin
  PatUn:first PatBinRest*:rest ->
    if (!rest.length) {
      return first
    } else {
      // TODO: Think more about binary operation chains, this may be fine?
      return rest.unshift(first)
    }
  # NOTE: Eliminated left recursion

PatBinRest
  __ "or" __ PatBin
  __ ":" __ Typ

Pat
  PatBin

PatField
  Id (__ ":" __ Typ)? __ "=" __  Pat
  Id (__ ":" __ Typ)?

DecVar
  "var" __ Id:id (__ ":" __ Typ)? __ "=" __ Exp:exp ->
    return { type: "var", id, exp, }

DecNonvar
  "let" __ Pat:pat __ "=" __ Exp:exp ->
    return { type: "let", pat, exp}
  "type" __ Id __ ("<" ( TypBind ( "," __ TypBind )* )? ">")? __ "=" __ Typ
  ObjSort:type __ Id?:id __ "="? __ ObjBody:body ->
    return { id, type, body }
  SharedPatOpt:shared __ "func" __ Id?:id __ Typing? __ PatPlain:pat __ (":" __ Typ)? __ FuncBody:body ->
    // TODO: Typing, Typ
    return { type: "func", shared, id, pat, body}
  SharedPatOpt:shared __ ObjSort?:sort __ "class" __ Id?:id __ Typing? __ PatPlain:pat __ (":" __ Typ)? __ ClassBody:body ->
    // TODO: Typing, Typ
    return { type: "class", sort, shared, id, pat, body}

Typing
  "<" ( TypBind ("," __ TypBind )* )? ">"

Dec
  DecVar
  DecNonvar
  # TODO: Temporarily returning string value of entire parsed expression
  $(ExpNondec)

FuncBody
  "=" __ Exp:exp -> exp
  Block

ObjBody
  "{" __ ObjBodyField*:fields "}" __ -> fields

# NOTE: Extracted dec-field with optional trailing semi-colon when object closes to make field iteration easier in ObjBody
ObjBodyField
  DecField:field __ ( ";" / (__ &"}") ) __ -> field

ClassBody
  "=" __ Id? __ ObjBody
  ObjBody

Comment
  # Multiline comment
  # TODO: handle nested comments
  "/*" $((!"*/" [^])*) "*/"

  # Single line comment
  /\/\/[^\r\n]*/

# Any or no whitespace including newlines and comments
__
  ([\s]+ / Comment)*
