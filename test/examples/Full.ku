import Debug "mo:base/Debug"

module
  public class Grid(state : State.State)
    let grid = state

    let n = grid.size()

    public func size() : Nat
      n

    func nextCell(i : Nat, j : Nat) : State.Cell
      let l : Nat = living i, j
      if get i, j
        l == 2 or l == 3
      else
        l == 3

    func next(dst : Grid)
      for i in grid.keys()
        let cool = true

        for j in grid[i].keys()
          let yo = "wat"
          dst.set i, j, nextCell i, j

    func tryCatch() : ()
      try
        Debug.print "Ring!"
      catch e
        Debug.print "!"

    public func setClockSequence(seq : ?Nat16)
      var s : Nat16 = switch seq
        case null
          let bs = switch rand.read 2
            case #ok(bs)  bs
            case #eof(bs) bs
            case #err(_)
              assert(false)
              []

          nat8to16(bs[0]) << 8 | nat8to16(bs[1])

        case (? s)
          s
